"""
Django settings for testauto project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
# 项目的配置文件
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 项目路径
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 随机值，在项目创建的时候生成，主要用于重要数据的加密处理，提高系统的安全性， 主要用于用户密码，CSRF机制和会话Session等数据加密
# 密钥配置
SECRET_KEY = '(rhio9i027e40-x&e7eilfbnd)y9@n&(hgx%689-@ei^0!_u_v'

# SECURITY WARNING: don't run with debug turned on in production!
# 测试环境配置
# 调试模式 & 域名访问权限
DEBUG = True
ALLOWED_HOSTS = []
# 生产环境配置
# DEBUG = False
# ALLOWED_HOSTS = ['*']


# Application definition
# app列表 django包含哪些内容
# 内置的后台管理系统
# 内置的用户认证系统
# 记录项目中所有model元数据（Django自带的ORM框架）
# 会话功能
# 消息提示功能
# 查找静态资源路径
# 自定义Ap
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes' ,
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'study.apps.StudyConfig',
]
# 处理用户请求信息。
# 中间件处理Django的request和response对象的钩子
# 内置的安全机制，保护用户和网站的通讯安全
# 会话session功能
# 处理请求信息规范化请求内容
# 开启CSRF防护功能
# 开启内置的用户认证系统
# 开启内置的信息提示功能
# 防止恶意程序点击劫持
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 路由
ROOT_URLCONF = 'testauto.urls'


# 定义模板引擎，用户识别模板里面的变量和指令
# 设置模板所在的路径，可配置多个路径
# 是否在app中查找模板文件
# 用于填充在RequestContext中上下文的调用函数，一般情况不用修改
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'testauto.wsgi.application'
# python manage.py makemigrations
# python manage.py migrate 迁移

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# 数据库配置  如果使用django的默认sqlite3数据库则不需要改。
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "test_h",
        'USER': "test",
        'PASSWORD': "test123456",
        'HOST': "47.105.71.236",
        'POST': "3306"
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
# 语言
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
# 静态文件目录
# 静态文件配置
STATIC_URL = '/static/'
STATIC_ROOT = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
#具体路径
# STATICFILES_DIRS=[
# (os.path.join(BASE_DIR, 'static'),)
# ]
# 我们一般只用 STATIC_URL，但STATIC_URL会按着你的STATICFILES_DIRS去找